What happens when you initialize a repository? Why do you need to do it?

When you initialize a repository, it tells Git that it will be keeping track of the directory and changes to files within that direcorty. You have to do it in order to have Git create the needed hidden .git directory in which it will store the data about the file histories.

How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area is a middleground between the working directory and the repository. It allows you to manually choose what gets added to the repository from the working directory.

How can you use the staging area to make sure you have one commit per logical change?

You can use the staging area to make sure you have one commit per logical change by being able to see the changes which need committing as well as what was changed in each file so you can pick and choose what gets added to each commit.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Branches would be helpful in splitting the code so you could try out new features while maintaining a stable version of the code as a master without having to roll back to a commit each time.

How do the diagrams help you visualize the branch structure?

The diagrams are helpful to show the relationships between branches, as well as changes made before and after the creation of branches so you always know what point on the tree you're at.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

Merging two branches combines the last commits into a single file, bringing changes from both. Representing it in the diagram gives you a visualization of what changes will be brought into the new merged branch.

What are the pros and cons of Git's automatic merging vs always doing merges manually?

Git's automatic merging saves time and effort by making the more obvious merges for you, but may result in unwanted outcomes on occasion. Doing merges manually gives you the power to make sure the merge happens exactly the way you want it to, but takes longer.